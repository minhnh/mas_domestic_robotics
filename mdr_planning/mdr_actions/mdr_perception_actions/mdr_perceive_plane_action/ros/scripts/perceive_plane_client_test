#! /usr/bin/env python
from datetime import datetime
import os
import yaml
import subprocess
import argparse
import cv2
import rospy
import actionlib
from cv_bridge import CvBridge
from sensor_msgs.msg import PointCloud2
from mdr_perceive_plane_action.msg import PerceivePlaneAction, PerceivePlaneGoal

ACTION_SERVER_NAME = '/mdr_actions/perceive_plane_server'
DETECTED_OBJECT_TOPIC = '/detected_obj_topic'


def main(args):
    client = actionlib.SimpleActionClient(ACTION_SERVER_NAME, PerceivePlaneAction)
    service_timeout = 5.0
    task_timeout = 10.0
    if not client.wait_for_server(rospy.Duration.from_sec(int(service_timeout))):
        rospy.logerr('timeout waiting for action server ' + ACTION_SERVER_NAME)
        return

    prefix = datetime.now().strftime('%Y-%m-%d_%H-%M-%S')
    if args.file_prefix:
        prefix = args.file_prefix + '_' + prefix

    if not os.path.exists(args.data_dir):
        try:
            os.makedirs(args.data_dir)
        except OSError as e:
            rospy.logerr('cannot create "{0}": {1}'.format(args.data_dir, e.message))

    pro = None
    pointcloud_pub = None
    if args.record_data and args.topic_file:
        # creating the publisher for pointclouds
        pointcloud_pub = rospy.Publisher(DETECTED_OBJECT_TOPIC, PointCloud2, queue_size=1)

        full_path = os.path.join(args.data_dir, prefix + '.bag')
        topics = yaml.load(open(args.topic_file, 'r')) + ' ' + DETECTED_OBJECT_TOPIC
        cmd = 'rosbag record ' + topics + ' -O ' + full_path
        pro = subprocess.Popen(cmd.split(' '), stdout=subprocess.PIPE,
                               shell=True, preexec_fn=os.setsid)

    goal = PerceivePlaneGoal()
    goal.plane_config = 'table'
    goal.plane_frame_prefix = 'frame_table'

    rospy.loginfo('Sending action lib goal to ' + ACTION_SERVER_NAME)
    client.send_goal(goal)
    if not client.wait_for_result(rospy.Duration.from_sec(int(task_timeout))):
        rospy.logerr('timeout wait for action result ')
        return

    result = client.get_result()
    if result is None:
        rospy.logwarn('None result returned from action server')
        return

    if args.record_data:
        cv_bridge = CvBridge()
        plane_index = 0
        for plane in result.recognized_planes.planes:
            obj_index = 0
            for obj in plane.object_list.objects:
                if pointcloud_pub is not None:
                    pointcloud_pub.publish(obj.pointcloud)
                image_file_path = os.path.join(args.data_dir, '{0}_{1}_{2}_{3}.png'
                                               .format(prefix, plane_index, obj_index, obj.name))

                cv_image = cv_bridge.imgmsg_to_cv2(obj.rgb_image, desired_encoding="passthrough")
                cv2.imwrite(image_file_path, cv_image)
                obj_index += 1
                pass

            plane_index += 1
            pass
        pass

    if pro is not None:
        import signal
        os.killpg(os.getpgid(pro.pid), signal.SIGTERM)


if __name__ == '__main__':
    rospy.init_node('perceive_plane_client_tester')
    parser = argparse.ArgumentParser()
    parser.add_argument('--record-data', '-r', action='store_true', help='location to store data')
    parser.add_argument('--data-dir', '-d', default='data', help='location to store data')
    parser.add_argument('--file-prefix', '-p', default='', help='prefix for file name')
    parser.add_argument('--topic-file', '-t', default=None, help='file with ROS topics to record')
    main(parser.parse_args())
